package pages.modal;

import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import models.RegistrationModel;
import pages.transaction.Resep;

/**
 *
 * @author ameng
 */
public class RegistrationFilter extends javax.swing.JFrame {
    
    RegistrationModel registrationModel = new RegistrationModel();
    SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
    pages.transaction.Resep transactionResep;
    pages.transaction.Pemeriksaan transactionPemeriksaan;
    public String callbackTo = "";

    /**
     * Creates new form RegistrationFilter
     */
    public RegistrationFilter() {
        initComponents();
        initDateFilter();
    }
    
    public RegistrationFilter(pages.transaction.Resep parent) {
        initComponents();
        initDateFilter();
        
        this.transactionResep = parent;
        this.callbackTo = "transaction-resep";
    }
    
    public RegistrationFilter(pages.transaction.Pemeriksaan parent) {
        initComponents();
        initDateFilter();
        
        this.transactionPemeriksaan = parent;
        this.callbackTo = "transaction-pemeriksaan";
    }
    
    private void initDateFilter() {
        Date date = new Date();
        
        filterDate.setDate(date);
        
        initTable();
    }
    
    private void initTable() {
        Date filterdate = filterDate.getDate();
        System.out.println("initTable");
        DefaultTableModel RecordTable = (DefaultTableModel) registrationTable.getModel();
        RecordTable.setRowCount(0);

        try {
            ResultSet registrations;
            if (!filterDate.isEnabled()) {                
                registrations = registrationModel.getRegistrant();                
            } else {
                String formattedfilterdate = dateFormat.format(filterdate);
                System.out.println(formattedfilterdate);

                registrations = registrationModel.getRegistrantByDate(formattedfilterdate);                
            }

            while (registrations.next()) {
                System.out.println(registrations.getString("r.id"));
                System.out.println(registrations.getString("r.registration_at"));
                System.out.println(registrations.getString("d.clinic"));
                System.out.println(registrations.getString("d.name"));
                System.out.println(registrations.getString("p.name"));
                System.out.println(registrations.getString("p.gender"));
                System.out.println(registrations.getString("p.date_of_birth"));
                System.out.println(registrations.getString("r.stat"));

                String stat = "";

//                disableButtons();
                switch (registrations.getInt("r.stat")) {
                    case 1:
                        stat = "Menunggu Pemeriksaan Dokter";
                        break;
                    case 2:
                        stat = "Menunggu Pemberian Obat";
                        break;
                    case 3:
                        stat = "Selesai";
                        break;
                    default:
                        stat = "Menunggu Anamnesa";
                }

                String genderString = "Laki-Laki";
                if (registrations.getInt("p.gender") == 2) {
                    genderString = "Perempuan";
                }

                Vector column = new Vector();
                column.add(registrations.getInt("r.id"));
                column.add(registrations.getString("r.registration_at"));
                column.add(registrations.getString("d.clinic"));
                column.add(registrations.getString("d.name"));
                column.add(registrations.getString("p.name"));
                column.add(genderString);
//                column.add(registrations.getString("p.date_of_birth"));
//                column.add(stat);
                RecordTable.addRow(column);
            }
            
            registrationTable.getColumnModel().getColumn(0).setMinWidth(40);
            registrationTable.getColumnModel().getColumn(0).setMaxWidth(40);
            registrationTable.getColumnModel().getColumn(0).setWidth(40);

        } catch (Exception e) {
            System.out.println("ERROR: " + e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filterDate = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        registrationTable = new javax.swing.JTable();
        jToggleButton1 = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        filterDate.setDateFormatString("d MMM y");
        filterDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                filterDatePropertyChange(evt);
            }
        });
        filterDate.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                filterDateVetoableChange(evt);
            }
        });

        registrationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Waktu Pemeriksaan", "Klinik", "Dokter", "Nama Pasien", "Jenis Kelamin Pasien"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        registrationTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                registrationTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(registrationTable);

        jToggleButton1.setText("Semua");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jToggleButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filterDate, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 719, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(filterDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void registrationTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_registrationTableMouseClicked
        if (evt.getClickCount() == 2 && !evt.isConsumed()) {
            int row = registrationTable.rowAtPoint(evt.getPoint());
            String id = registrationTable.getValueAt(row, 0).toString();

            switch (callbackTo) {
                case "transaction-resep":
                    transactionResep.setRegistrationId(id);
                    this.dispose();
                    break;
                case "transaction-pemeriksaan":
                    transactionPemeriksaan.setRegistrationId(id);
                    this.dispose();
                    break;
                default:
//                    throw new AssertionError();
            }
        }
    }//GEN-LAST:event_registrationTableMouseClicked

    private void filterDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_filterDatePropertyChange
           initTable();            
    }//GEN-LAST:event_filterDatePropertyChange

    private void filterDateVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_filterDateVetoableChange
        // TODO add your handling code here:
        initTable();
    }//GEN-LAST:event_filterDateVetoableChange

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        System.out.println(jToggleButton1.isSelected());
                
        filterDate.setEnabled(!jToggleButton1.isSelected());
        initTable();
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistrationFilter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistrationFilter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistrationFilter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistrationFilter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegistrationFilter().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser filterDate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JTable registrationTable;
    // End of variables declaration//GEN-END:variables
}
